# https://taskfile.dev

version: "3"

env:
  CGO_ENABLED: 0
  GOEXPERIMENT: greenteagc

tasks:
  lint:install:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    env:
      GOTOOLCHAIN: go1.25.0

  lint:
    desc: Run base linters
    cmds:
      - golangci-lint run --path-mode=abs --config=".golangci.yml" --timeout=5m
    env:
      GOEXPERIMENT: null

  lint-fix:
    desc: Run base linters and fix issues
    cmds:
      - golangci-lint run --path-mode=abs --config=".golangci.yml" --timeout=5m --fix
    env:
      GOEXPERIMENT: null

  build:
    desc: Run build
    cmds:
      - go build .
    generates:
      - crush

  test:
    desc: Run tests
    cmds:
      - go test ./... {{.CLI_ARGS}}

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test:lsp:
    desc: Run LSP-specific tests
    cmds:
      - go test -v ./internal/llm/tools/... -run "Test.*LSP|Test.*Definition|Test.*References|Test.*Symbol|Test.*Hover|Test.*Completion|Test.*CallHierarchy"
      - go test -v ./internal/llm/context/... -run "Test.*Context|Test.*Enhancer"

  fmt:
    desc: Run gofumpt
    cmds:
      - gofumpt -w .

  dev:
    desc: Run with profiling enabled
    env:
      CRUSH_PROFILE: true
    cmds:
      - go run .

  install:
    desc: Install the application
    cmds:
      - go install -v .

  profile:cpu:
    desc: 10s CPU profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/profile?seconds=10'

  profile:heap:
    desc: Heap profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/heap'

  profile:allocs:
    desc: Allocations profile
    cmds:
      - go tool pprof -http :6061 'http://localhost:6060/debug/pprof/allocs'

  schema:
    desc: Generate JSON schema for configuration
    cmds:
      - go run main.go schema > schema.json
      - echo "Generated schema.json"
    generates:
      - schema.json

  validate:
    desc: Run comprehensive validation suite
    cmds:
      - ./scripts/validate.sh

  validate:quick:
    desc: Run quick validation (format, lint, test)
    cmds:
      - ./scripts/validate.sh format
      - ./scripts/validate.sh lint
      - ./scripts/validate.sh test

  validate:lsp:
    desc: Validate LSP-specific functionality
    cmds:
      - ./scripts/validate.sh lsp

  validate:security:
    desc: Run security validation
    cmds:
      - ./scripts/validate.sh security

  benchmark:
    desc: Run performance benchmarks
    cmds:
      - go test -bench=. -benchmem ./... | tee benchmark_results.txt

  clean:
    desc: Clean generated files
    cmds:
      - rm -f coverage.out coverage.html benchmark_results.txt validation_report.md
      - rm -f crush
